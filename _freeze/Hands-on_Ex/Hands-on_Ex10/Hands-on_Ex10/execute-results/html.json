{
  "hash": "e9aae76d4ca89cc60682c971417982d8",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 10\"\ndescription: \"Calibrating Spatial Interaction Models with R\"\nexecute: \n  warning: false\n  freeze: true\n# date: \"2024-03-21\"\ndate: 03/21/2024\ndate-format: \"D MMM, YYYY\" \nauthor: \n  - Wan Shen\nsidebar: false\ntitle-block-banner: true\ncategories:\n  - Hands-On Exercise\ntitle-block-categories: false\n---\n\n\n# 1.0 Getting Started\n\nIn this exercise, we are going to calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore.\n\nFor the purpose of this exercise, four r packages will be used. They are:\n\n-   sf for importing, integrating, processing and transforming geospatial data.\n-   tidyverse for importing, integrating, wrangling and visualising data.\n-   tmap for creating thematic maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, sp,\n               performance, reshape2,\n               ggpubr, tidyverse)\n```\n:::\n\n\nThis exercise is a continuation of **Chapter 15: Processing and Visualising Flow Data** and the following data will be used:\n\n-   *od_data.rds*, weekday morning peak passenger flows at planning subzone level.\n-   *mpsz.rds*, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided. It\n\n# 2.0 Computing Distance Matrix\n\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location's distance from itself, which is shown in the main diagonal of the table, is 0.\n\nIn this section, you will learn how to compute a distance matrix by using URA Master Plan 2019 Planning Subzone boundary in which you saved as an rds file called *mpsz*.\n\nFirst, let us import *mpsz.rds* into R environemnt by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n:::\n\n\nNotice that it is a sf tibble dataframe object class.\n\n## 2.1 Converting from sf data.table to SpatialPolygonsDataFrame\n\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\n\nFirst [`as.Spatial()`](https://r-spatial.github.io/sf/reference/coerce-methods.html) will be used to convert *mpsz* from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sp <- as(mpsz, \"Spatial\")\nmpsz_sp\n```\n:::\n\n\n## 2.2 Computing the distance matrix\n\nNext, [`spDists()`](https://www.rdocumentation.org/packages/sp/versions/2.1-1/topics/spDistsN1) of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- spDists(mpsz_sp, \n                longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dist, n=c(10, 10))\n```\n:::\n\n\nNotice that the output *dist* is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.\n\n## 2.3 Labelling column and row heanders of a distance matrix\n\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsz_names <- mpsz$SUBZONE_C\n```\n:::\n\n\nNext we will attach `SUBZONE_C` to row and column for distance matrix matching ahead\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(dist) <- paste0(sz_names)\nrownames(dist) <- paste0(sz_names)\n```\n:::\n\n\n## 2.4 Pivoting distance value by SUBZONE_C\n\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- melt(dist) %>%\n  rename(dist = value)\nhead(distPair, 10)\n```\n:::\n\n\nNotice that the within zone distance is 0.\n\n## 2.5 Updating intra-zonal distances\n\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0.\n\nFirst, we will select and find out the minimum value of the distance by using `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair %>%\n  filter(dist > 0) %>%\n  summary()\n```\n:::\n\n\nNext, a constant distance value of 50m is added into intra-zones distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair$dist <- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n```\n:::\n\n\nThe code chunk below will be used to check the result data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair %>%\n  summary()\n```\n:::\n\n\nThe code chunk below is used to rename the origin and destination fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- distPair %>%\n  rename(orig = Var1,\n         dest = Var2)\n```\n:::\n\n\nLastly, the code chunk below is used to save the dataframe for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(distPair, \"../../data/rds/distPair.rds\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- read_rds(\"../../data/rds/distPair.rds\")\n```\n:::\n\n\n# 3.0 Preparing flow data\n\nThe code chunk below is used import *od_data* save in Chapter 15 into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data_fii <- read_rds(\"../../data/rds/od_data_fii.rds\")\n```\n:::\n\n\nNext, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all *flow_data*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data <- od_data_fii %>%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %>% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n```\n:::\n\n\nUse the code chunk below to display flow_data dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flow_data, 10)\n```\n:::\n\n\n## 3.1 Separating intra-flow from passenger volume df\n\nCode chunk below is used to add three new fields in `flow_data` dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data$FlowNoIntra <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n```\n:::\n\n\n## 3.2 Combining passenger volume data with distance value\n\nBefore we can join *flow_data* and *distPair*, we need to convert data value type of *ORIGIN_SZ* and *DESTIN_SZ* fields of flow_data dataframe into factor data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)\n```\n:::\n\n\nNow, `left_join()` of **dplyr** will be used to *flow_data* dataframe and *distPair* dataframe. The output is called *flow_data1*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data1 <- flow_data %>%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))\n```\n:::\n\n\n# 4.0 Preparing Origin and Destination Attributes\n\n## 4.1 Importing population data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- read_csv(\"../../data/aspatial/pop.csv\")\n```\n:::\n\n\n## 4.2 Geospatial data wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- pop %>%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %>%\n  select(1:6) %>%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n```\n:::\n\n\n## 4.3 Preparing origin attribute\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %>%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n```\n:::\n\n\n## 4.4 Preparing destination attribute\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %>%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n```\n:::\n\n\nWe will called the output data file *SIM_data*. it is in rds data file format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(flow_data1, \"../../data/rds/flow_data_6-9.rds\")\n```\n:::\n\n\n# 5.0 Calibrating Spatial Interaction Models\n\nIn this section, you will learn how to calibrate Spatial Interaction Models by using Poisson Regression method.\n\n## 5.1 Importing the modelling data\n\nFirstly, let us import the modelling data by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSIM_data <- read_rds(\"../../data/rds/SIM_data.rds\")\n```\n:::\n\n\n## 5.2 Visualising the dependent variable\n\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n```\n:::\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\n\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n:::\n\n\nNotice that their relationship hardly resemble linear relationship.\n\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n:::\n\n\n## 5.3 Checking for variables with zero values\n\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\n\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in *SIM_data* data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(SIM_data)\n```\n:::\n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\n\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSIM_data$DESTIN_AGE7_12 <- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 <- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 <- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 <- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 <- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 <- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n```\n:::\n\n\nYou can run the summary() again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(SIM_data)\n```\n:::\n\n\nNotice that all the 0 values have been replaced by 0.99.\n\n## 5.4 Unconstrained Spatial Interaction Model\n\nIn this section, you will learn how to calibrate an unconstrained spatial interaction model by using `glm()` of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. *ORIGIN_AGE25_64*) and distance between origin and destination in km (i.e. *dist*).\n\nThe general formula of Unconstrained Spatial Interaction Model\n\nThe code chunk used to calibrate to model is shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuncSIM <- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n```\n:::\n\n\n## 5.5 R-squared function\n\nIn order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCalcRSquared <- function(observed,estimated){\n  r <- cor(observed,estimated)\n  R2 <- r^2\n  R2\n}\n```\n:::\n\n\nNext, we will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr2_mcfadden(uncSIM)\n```\n:::\n\n\n## 5.6 Origin (Production) constrained SIM\n\nIn this section, we will fit an origin constrained SIM by using the code3 chunk below.\n\nThe general formula of Origin Constrained Spatial Interaction Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\norcSIM <- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n```\n:::\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n```\n:::\n\n\n## 5.7 Destination constrained\n\nIn this section, we will fit a destination constrained SIM by using the code chunk below.\n\nThe general formula of Destination Constrained Spatial Interaction Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecSIM <- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n```\n:::\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n```\n:::\n\n\n## 5.8 Doubly constrained\n\nIn this section, we will fit a doubly constrained SIM by using the code chunk below.\n\nThe general formula of Doubly Constrained Spatial Interaction Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbcSIM <- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n```\n:::\n\n\nWe can examine how the constraints hold for destinations this time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n```\n:::\n\n\nNotice that there is a relatively greater improvement in the R\\^2 value.\n\n## 5.9 Model comparison\n\nAnother useful model performance measure for continuous dependent variable is [Root Mean Squared Error](https://towardsdatascience.com/what-does-rmse-really-mean-806b65f2e48e). In this sub-section, you will learn how to use [`compare_performance()`](https://easystats.github.io/performance/reference/compare_performance.html) of [**performance**](https://easystats.github.io/performance/index.html) package\n\nFirst of all, let us create a list called *model_list* by using the code chun below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_list <- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n```\n:::\n\n\nNext, we will compute the RMSE of all the models in *model_list* file by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n```\n:::\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111.\n\n## 5.10 Visualising fitted values\n\nIn this section, you will learn how to visualise the observed values and the fitted values.\n\nFirstly we will extract the fitted values from each model by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(uncSIM$fitted.values) %>%\n  round(digits = 0)\n```\n:::\n\n\nNext, we will join the values to *SIM_data* data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n```\n:::\n\n\nRepeat the same step by for Origin Constrained SIM (i.e. orcSIM)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(orcSIM$fitted.values) %>%\n  round(digits = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n```\n:::\n\n\nRepeat the same step by for Destination Constrained SIM (i.e. decSIM)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(decSIM$fitted.values) %>%\n  round(digits = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n```\n:::\n\n\nRepeat the same step by for Doubly Constrained SIM (i.e. dbcSIM)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(dbcSIM$fitted.values) %>%\n  round(digits = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunc_p <- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p <- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p <- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p <- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n:::\n\n\nNow, we will put all the graphs into a single visual for better comparison by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}