---
title: "Hands-on Exercise 3C"
description: "Network Constrained Spatial Point Patterns Analysis"
execute: 
  warning: false
# date: "`r Sys.Date()`"
date: 01/23/2024
date-format: "D MMM, YYYY" 
author: 
  - Wan Shen
sidebar: false
title-block-banner: true
categories:
  - Hands-On Exercise
title-block-categories: false
---

# 1.0 Getting Started

```{r}
pacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse)
```

# 2.0 Data Import and Preparation

```{r}
network <- st_read(dsn="../../data/geospatial", 
                   layer="Punggol_St")
```

```{r}
childcare <- st_read(dsn="../../data/geospatial",
                     layer="Punggol_CC")
```

```{r}
str(network)
str(childcare)
```

# 3.0 Visualising the Geospatial Data

```{r}
plot(network)
plot(childcare,add=T,col='red',pch = 19)
```

```{r}
tmap_mode('view')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
tmap_mode('plot')
```

# 4.0 Network Constrained KDE (NetKDE) Analysis

## 4.1 Preparing the lixels objects

```{r}
lixels <- lixelize_lines(network, 
                         750, 
                         mindist = 375)
```

## 4.2 Generating line centre points

Next, *lines_center()* of **spNetwork** will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.

```{r}
samples <- lines_center(lixels)
```

The points are located at center of the line based on the length of the line.

## 4.3 Performing NetKDE

We are ready to computer the NetKDE by using the code chunk below.

```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1,nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic", #Impt
                  bw = 300, #Impt
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, #we aggregate events within a 5m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

### 4.3.1 Visualising NetKDE

```{r}
samples$density <- densities
lixels$density <- densities
```

```{r}
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
tmap_mode('plot')
```

# 5.0 Network Constrained G- and K-Function Analysis

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

```{r}
kfun_childcare$plotk
```
