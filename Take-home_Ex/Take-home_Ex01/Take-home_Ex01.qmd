---
title: "Take-home Exercise 1"
#subtitle: "Geospatial Data Wrangling with R"
description: "Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore"
execute: 
  warning: false
  eval: true
  echo: true
# date: "`r Sys.Date()`"
date: 01/21/2024
date-format: "D MMM, YYYY" 
author: 
  - Wan Shen
sidebar: false
title-block-banner: true
categories:
  - Take-Home Exercise
title-block-categories: false
#format: 
  #html: 
    #code-fold: true
    #code-summary: "Show the code"
---

# 1.0 Getting Started

```{r}
pacman::p_load(sf, tidyverse, tmap, arrow, lubridate, maptools, raster, spatstat)
```

# 2.0 Spatial Data Wrangling

## 2.1 Importing the spatial data

Aspatial Data

```{r}
#| eval: false 
grab0 <- read_parquet("../../data/TakeHome/TakeHome_01/aspatial/part-00000.parquet")
head(grab0, n=3)
```

Geospatial Data

```{r}
#| eval: false 
roadMe <- st_read("../../data/TakeHome/TakeHome_01/geospatial",
               layer = "gis_osm_roads_free_1")
head(roadMe, n=3)
```

```{r}
#| eval: false 
islandMe <- st_read("../../data/TakeHome/TakeHome_01/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
head(islandMe, n=3)
```

```{r}
#| eval: false 
#| echo: false 
write_rds(roadMe, "../../data/TakeHome/TakeHome_01/rds/road_df.rds")
write_rds(islandMe, "../../data/TakeHome/TakeHome_01/rds/island_df.rds")
```

```{r}
road_df <- read_rds("../../data/TakeHome/TakeHome_01/rds/road_df.rds")
island_df <- read_rds("../../data/TakeHome/TakeHome_01/rds/island_df.rds")
```

## 2.2 Data Pre-Processing

```{r}
road_df <- road_df[!(is.na(road_df$name)), ]
island_df <- island_df[!(is.na(island_df$geometry)), ]
```

```{r}
#| eval: false
grab0_df$pingtimestamp <- as_datetime(grab0_df$pingtimestamp)
```

```{r}
#| eval: false
origin0_df <- grab0_df %>% 
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
origin0_df
```

```{r}
#| eval: false 
#| echo: false 
write_rds(origin0_df, "../../data/TakeHome/TakeHome_01/rds/grab0.rds")
```

```{r}
grab0_df <- read_rds("../../data/TakeHome/TakeHome_01/rds/grab0.rds")
```

::: callout-note
Using the crs info function to retrieve the referencing system information of these geospatial data.
:::

```{r}
crs_info1 <- st_crs(road_df)
crs_info2 <- st_crs(island_df)
crs_info1
```

```{r}
crs_info2
```

::: callout-note
Preparing the following geospatial data layer in sf tibble data.frames.
:::

Road layer within Singapore excluding outer islands.

```{r}
tibble1 <- as_tibble(road_df)
tibble1
```

Singapore boundary layer excluding outer islands

```{r}
tibble2 <- as_tibble(island_df)
tibble2
```

::: callout-note
Changing the referencing system to Singapore national projected coordinate system.
:::

```{r}
road_sf <- st_transform(road_df, crs = 3414)
island_sf <- st_transform(island_df, crs = 3414)
```

```{r}
grab0_sf <- st_as_sf(grab0_df, 
                       coords = c("rawlng", "rawlat"),
                       crs=4326) %>%
  st_transform(crs = 3414)
glimpse(grab0_sf)
```

```{r}
island_sf <- st_zm(island_sf)
```

```{r}
sf_df <- st_as_sf(road_sf, wkt = "geometry")
roads_in_singapore <- st_intersection(sf_df, island_sf)
```

## 2.3 Mapping the geospatial data sets

::: callout-note
After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.
:::

```{r}
roads_in_singapore <- st_transform(roads_in_singapore, crs = 3414)
```

Grab Taxi Location Points

```{r}
tmap_mode("plot")
tm_shape(grab0_sf) +
  tm_dots()
```

Master Plan 2019 Planning Subzone Boundary with Grab Taxi Location Points

```{r}
tm_shape(island_sf) +
  tm_polygons() +
tm_shape(grab0_sf) +
  tm_dots()
```

```{r}
#tm_shape(island_sf) +
#  tm_polygons() +
#tm_shape(roads_in_singapore) +
#  tm_dots()
```

# 3.0 Geospatial Data wrangling

## 3.1 Converting sf data frames to sp’s Spatial\* class

::: callout-note
The code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial\* class.
:::

```{r}
#| eval: false
island <- as_Spatial(island_sf)
grab0_as <- as_Spatial(grab0_sf)
road <- as_Spatial(roads_in_singapore)
```

```{r}
#| eval: false
#| echo: false
write_rds(road, "../../data/TakeHome/TakeHome_01/rds/as_road_df.rds")
write_rds(island, "../../data/TakeHome/TakeHome_01/rds/as_island_df.rds")
write_rds(grab0_as, "../../data/TakeHome/TakeHome_01/rds/as_grab0_df.rds")
```

```{r}
road_as <- read_rds("../../data/TakeHome/TakeHome_01/rds/as_road_df.rds")
island_as <- read_rds("../../data/TakeHome/TakeHome_01/rds/as_island_df.rds")
grab0_as <- read_rds("../../data/TakeHome/TakeHome_01/rds/as_grab0_df.rds")
```

```{r}
island_as
```

```{r}
road_as
```

```{r}
grab0_as
```

## 3.2 Converting the Spatial\* class into generic sp format

::: callout-note
Since spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial\* classes into ppp object. We need to convert the Spatial classes\* into Spatial object first.

The codes chunk below converts the Spatial\* classes into generic sp objects.
:::

```{r}
#| eval: false
island_sp <- as(island_as, "SpatialPolygons")
road_sp <- as(road_as, "SpatialPoints")
grab0_sp <- as(grab0_as, "Spatial")
```

```{r}
#| eval: false
#| echo: false
write_rds(road_sp, "../../data/TakeHome/TakeHome_01/rds/sp_road_df.rds")
write_rds(island_sp, "../../data/TakeHome/TakeHome_01/rds/sp_island_df.rds")
write_rds(grab0_sp, "../../data/TakeHome/TakeHome_01/rds/sp_grab0_df.rds")
```

```{r}
road_sp <- read_rds("../../data/TakeHome/TakeHome_01/rds/sp_road_df.rds")
island_sp <- read_rds("../../data/TakeHome/TakeHome_01/rds/sp_island_df.rds")
grab0_sp <- read_rds("../../data/TakeHome/TakeHome_01/rds/sp_grab0_df.rds")
```

```{r}
island_sp
```

```{r}
road_sp
```

```{r}
grab0_sp
```

## 3.3 Converting the generic sp format into spatstat’s ppp format

::: callout-note
Now, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.
:::

```{r}
road_ppp <- as(road_sp, "ppp")
```

```{r}
plot(road_ppp)
```

```{r}
summary(road_ppp)
```

```{r}
grab0_ppp <- as(grab0_sp, "ppp")
```

```{r}
#plot(grab0_ppp)
```

```{r}
summary(grab0_ppp)
```

```{r}
sg_owin <- as(island_sp, "owin")
plot(sg_owin)
```

```{r}
glimpse(summary(sg_owin))
```

## 3.4 Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract road events that are located within Singapore by using the code chunk below.

::: callout-note
Plot the newly derived islandSG_ppp as shown below.
:::

```{r}
islandSG_ppp_road = road_ppp[sg_owin]
plot(islandSG_ppp_road)
```

```{r}
glimpse(summary(islandSG_ppp_road))
```

## 3.5 Handling duplicated points

We can check the duplication in a **ppp** object by using the code chunk below.

```{r}
any(duplicated(islandSG_ppp_road))
```

::: callout-note
To count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.
:::

```{r}
#| eval: false
multiplicity(islandSG_ppp_road)
```

::: callout-note
If we want to know how many locations have more than one point event, we can use the code chunk below.
:::

```{r}
sum(multiplicity(islandSG_ppp_road) > 1)
```

::: callout-note
The output shows that there are 165061 duplicated point events.

To view the locations of these duplicate point events, we will plot **road_as** data by using the c
:::

```{r}
tmap_mode('plot')
tm_shape(road_as) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

::: callout-note
The solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space. The code chunk below implements the jittering approach.
:::

```{r}
road_ppp_jit <- rjitter(road_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(road_ppp_jit))
```

```{r}
#islandSG_ppp_grab0 = grab0_ppp[sg_owin]
#plot(islandSG_ppp_grab0)
```

```{r}
#summary(islandSG_ppp_grab0)
```

# 4.0 Kernel Density Estimation

## 4.1 Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of density() of spatstat:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
#kde_grab0_bw <- density(grab0_ppp,
#                              sigma=bw.diggle,
#                              edge=TRUE,
#                            kernel="gaussian") 
```

```{r}
kde_roadSG_bw <- density(road_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_roadSG_bw)
```

```{r}
bw <- bw.diggle(road_ppp)
bw
```

## 4.2 Rescalling KDE values

In the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.

```{r}
road_ppp.km <- rescale(road_ppp, 1000, "km")
```

```{r}
kde_roadSG.bw <- density(road_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_roadSG.bw)
```

## 4.3 Working with different automatic badwidth methods

Beside bw.diggle(), there are three other **spatstat** functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().

Let us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.

```{r}
bw.scott(road_ppp.km)
```

```{r}
bw.diggle(road_ppp.km)
```

```{r}
kde_roadSG.scott <- density(road_ppp.km, 
                               sigma=bw.scott, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_roadSG.bw, main = "bw.diggle")
plot(kde_roadSG.scott, main = "bw.scott")
```

## 4.4 Converting KDE output into grid object

```{r}
gridded_kde_roadSG_bw <- as.SpatialGridDataFrame.im(kde_roadSG.bw)
spplot(gridded_kde_roadSG_bw)
```

## 4.5 Converting gridded output into raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using *raster()* of **raster** package.

```{r}
kde_kde_roadSG_bw_raster <- raster(gridded_kde_roadSG_bw)
```

::: callout-note
Let us take a look at the properties of kde_roadSG_bw_raster RasterLayer.
:::

```{r}
kde_kde_roadSG_bw_raster
```

::: callout-note
Notice that the crs property is NA.
:::

## 4.6 Assigning projection systems

::: callout-note
The code chunk below will be used to include the CRS information on kde_roadSG_bw_raster RasterLayer.
:::

```{r}
projection(kde_kde_roadSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_kde_roadSG_bw_raster
```

::: callout-note
Notice that the crs property is completed.
:::

# 5.0 Visualising the output in tmap

::: callout-note
Finally, we will display the raster in cartographic quality map using tmap package.
:::

```{r}
tm_shape(kde_kde_roadSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

::: callout-note
Using appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore
:::

```{r}
osm_layer <- qtm(basemaps = "OpenStreetMap", zoom = 12)
```

```{r}
tm_shape(kde_kde_roadSG_bw_raster) +
  tm_raster(style = "cont", palette = "viridis") +
  tm_layout(legend.show = TRUE) +
  osm_layer
```
