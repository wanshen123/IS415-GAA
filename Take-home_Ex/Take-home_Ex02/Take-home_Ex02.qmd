---
title: "Take-home Exercise 2"
description: "Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan"
execute: 
  warning: false
  eval: true
  echo: true
# freeze: true
# date: "`r Sys.Date()`"
date: 02/09/2024
date-format: "D MMM, YYYY" 
author: 
  - Wan Shen
sidebar: false
title-block-banner: true
categories:
  - Take-Home Exercise
title-block-categories: false
format: html 
---

# 1.0 Getting Started

**Background**

In this study, our focus will be on investigating whether the distribution of dengue fever outbreaks in Tainan City, Taiwan, is independent of spatial and temporal factors. If the outbreak exhibits spatial and spatio-temporal dependencies, our goal is to pinpoint clusters, outliers, and emerging hot spot/cold spot areas within the region.

**Packages Used:**

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html): For importing, managing, and processing geospatial data.

-   [**tidyverse**](https://www.tidyverse.org/): Collection of packages for data science tasks.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html): For creating thematic maps, such as choropleth and bubble maps.

-   [**sfdep**](https://sfdep.josiahparry.com/): Creating an sf and tidyverse friendly interface.

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

# 2.0 Spatial Data Wrangling

## 2.1 Importing the spatial data

Aspatial Data

```{r}
dengueDaily <- read_csv("../../data/TakeHome/TakeHome_02/aspatial/Dengue_Daily.csv")
```

Geospatial Data

```{r}
tainan <- st_read(dsn = "../../data/TakeHome/TakeHome_02/geospatial", 
                 layer = "TAINAN_VILLAGE")
head(tainan, 3)
```

## 2.2 Data Pre-Processing

### 2.2.1 Retrieve D01, D02, D04, D06, D07, D08, D32 and D39 counties of Tainan City, Taiwan.

```{r}
filtered_tainan <- tainan[tainan$TOWNID %in% c("D01", "D02", "D04", "D06", "D07", "D08", "D32", "D39"), ]
```

### 2.2.2 Dengue fever cases confined to epidemiology week 31-50, 2023

:::callout-note
Convert date column to Date format if it's not already
:::

```{r}
dengueDaily$發病日 <- as.Date(dengueDaily$發病日)
#dengueDaily$通報日 <- as.Date(dengueDaily$通報日)
```

Extract week numbers from the date column

```{r}
dengueDaily$week_number_onsetDay <- as.numeric(format(dengueDaily$發病日, "%V"))
#dengueDaily$week_number_reportDay <- as.numeric(format(dengueDaily$通報日, "%V"))
```

Define the start (31) and end (50) weeks of your range 

```{r}
onset_start_week <- 31
onset_end_week <- 50
#report_start_week <- 31
#report_end_week <- 50
```

Define the year

```{r}
year <- 2023
```

Filter rows based on the week range

```{r}
filtered_dengue <- dengueDaily[dengueDaily$week_number_onsetDay >= onset_start_week & dengueDaily$week_number_onsetDay <= onset_end_week & year(dengueDaily$發病日) == year, ]
#filtered_reportDengue <- dengueDaily[dengueDaily$week_number_reportDay >= report_start_week & dengueDaily$week_number_reportDay <= report_end_week & year(dengueDaily$通報日) == year, ]
```

## 2.3 Data Cleaning 

Translate to English

```{r}
filtered_dengue <- filtered_dengue %>%
  rename('x-coordinate' = 最小統計區中心點X,
         'y-coordinate' = 最小統計區中心點Y,
         'COUNTYNAME' = 居住縣市)
```

Check the current class of the column

```{r}
class(filtered_dengue$`x-coordinate`)
class(filtered_dengue$`y-coordinate`)
```

Convert the column to numeric

```{r}
filtered_dengue$`x-coordinate` <- as.numeric(filtered_dengue$`x-coordinate`)
filtered_dengue$`y-coordinate` <- as.numeric(filtered_dengue$`y-coordinate`)
```

Check the class of the column after conversion

```{r}
class(filtered_dengue$`x-coordinate`)
class(filtered_dengue$`y-coordinate`)
```

Remove NA values from all columns

```{r}
filtered_dengue <- na.omit(filtered_dengue)
```

Convert to an sf object with POINT geometry

```{r}
#filtered_dengue <- st_as_sf(filtered_dengue, coords = c('x-coordinate', 'y-coordinate'), crs = st_crs(filtered_tainan))
```

Grouping Town and Village based on number of dengue cases

```{r}
grouped_data <- filtered_dengue %>%
  group_by(居住鄉鎮, 居住村里) %>%
  summarise(count = n())
```

:::callout-note
Missing values means that the dengue cases are not part of the selected counties.
:::

Removing missing values

```{r}
grouped_data <- grouped_data[!(grouped_data$居住村里 == "None"), ]
```

Combining both data frame by using left join

```{r}
joined_data <- left_join(filtered_tainan, grouped_data, by = c("TOWNNAME" = "居住鄉鎮", "VILLNAME" = "居住村里"))
```

Keep only specific columns after joining

```{r}
#tainan_GDPPC <- tainan_GDPPC %>%
  #select(1, 3, 5)
```

```{r}
#| eval: false
crs_value <- st_crs(3824) 
st_crs(points_sf) <- crs_value
```

```{r}
#| eval: false
points_within_polygons <- st_join(points_sf, polygons_sf)
```

```{r}
#| eval: false
grouped_test <- points_within_polygons %>%
  group_by(居住鄉鎮, 居住村里, 內政部居住鄉鎮代碼) %>%
  summarise(count = n())
```

## 2.4 Plotting a choropleth map

Before removing missing values

```{r}
tmap_mode("plot")
tm_shape(joined_data) +
  tm_fill("count",
          style = "quantile",
          palette = "Blues",
          title = "Dengue Cases") +
  tm_layout(main.title = "Distribution of Dengue Cases",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = "8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

To fill missing values (NA) with 0

```{r}
joined_data$count[is.na(joined_data$count)] <- 0
```

After removing missing values

```{r}
tmap_mode("plot")
tm_shape(joined_data) +
  tm_fill("count",
          style = "quantile",
          palette = "Blues",
          title = "Dengue Cases") +
  tm_layout(main.title = "Distribution of Dengue Cases",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = "8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```