---
title: "In-class Exercise 2"
#subtitle: "Geospatial Data Wrangling with R"
description: "R for Geospatital Data Science"
execute: 
  warning: false
  eval: true
  echo: true
  freeze: true
# date: "`r Sys.Date()`"
date: 01/15/2024
date-format: "D MMM, YYYY" 
author: 
  - Wan Shen
sidebar: false
title-block-banner: true
categories:
  - In-Class Exercise
title-block-categories: false
#format: 
#  html: 
#    code-fold: true
#    code-summary: "Show the code"
---

# 1.0 Getting Started

```{r}
pacman::p_load(sf, tmap, tidyverse, lubridate, arrow)
```

# 2.0 Importing Grab-Posisi Dataset

```{r}
#| eval: false
df <- read_parquet("../../data/GrabPosisi/part-00000.parquet")
df
```

```{r}
#| eval: false
df$pingtimestamp <- as_datetime(df$pingtimestamp)
```

```{r}
#| eval: false
origin_df <- df %>% 
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
origin_df
```

```{r}
#| eval: false
destination_df <- df %>% 
  group_by(trj_id) %>%
  arrange(desc(pingtimestamp)) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         end_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
destination_df
```

```{r}
#| eval: false
#| echo: false
write_rds(origin_df, "../../data/rds/origin_df.rds")
write_rds(destination_df, "../../data/rds/destination_df.rds")
```

## 2.1 Import data

```{r}
origin_df <- read_rds("../../data/rds/origin_df.rds")
destination_df <- read_rds("../../data/rds/destination_df.rds")
```

# 3.0 Converting aspatial data into geospatial data

```{r}
listings_sf <- st_as_sf(origin_df, 
                       coords = c("rawlng", "rawlat"),
                       crs=4326) %>%
  st_transform(crs = 3414)
glimpse(listings_sf)
```

# 4.0 Visualising the data

## 4.1 Visualising frequency distribution

```{r}
ggplot(data=origin_df, 
       aes(x=weekday)) + 
  geom_bar()
```

## 4.2 Visualising as Point Symbol Map

```{r}
tmap_mode("plot")
tm_shape(listings_sf) +
  tm_dots()
```

# 5.0 Importing Master Plan 2019 Planning Subzone Boundary

```{r}
mpsz2019 <- st_read("../../data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml") %>%
  st_transform(crs = 3414)
```

```{r}
tm_shape(mpsz2019) +
  tm_polygons() +
tm_shape(listings_sf) +
  tm_dots()
```
