---
title: "Take-home Exercise 1"
#subtitle: "Geospatial Data Wrangling with R"
description: "Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore"
execute: 
  warning: false
  eval: true
  echo: true
# date: "`r Sys.Date()`"
date: 01/16/2024
date-format: "D MMM, YYYY" 
author: 
  - Wan Shen
sidebar: false
title-block-banner: true
categories:
  - Take-Home Exercise
title-block-categories: false
#format: 
  #html: 
    #code-fold: true
    #code-summary: "Show the code"
---

# 1.0 Getting Started

```{r}
pacman::p_load(sf, tidyverse, tmap, arrow, lubridate, maptools, raster, spatstat)
```

# 2.0 Spatial Data Wrangling

## 2.1 Importing the spatial data

Aspatial Data

```{r}
#grabMe <- read_parquet("../../data/TakeHome/TakeHome_01/aspatial/part-00000.parquet")
#head(grabMe, n=3)
```

Geospatial Data

```{r}
#| eval: false 
roadMe <- st_read("../../data/TakeHome/TakeHome_01/geospatial",
               layer = "gis_osm_roads_free_1")
head(roadMe, n=3)
```

```{r}
#| eval: false 
islandMe <- st_read("../../data/TakeHome/TakeHome_01/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
head(islandMe, n=3)
```

```{r}
#| eval: false 
#| echo: false 
write_rds(roadMe, "../../data/TakeHome/TakeHome_01/rds/road_df.rds")
write_rds(islandMe, "../../data/TakeHome/TakeHome_01/rds/island_df.rds")
```

```{r}
road_df <- read_rds("../../data/TakeHome/TakeHome_01/rds/road_df.rds")
island_df <- read_rds("../../data/TakeHome/TakeHome_01/rds/island_df.rds")
```

```{r}
road_df <- road_df[!(is.na(road_df$name)), ]
island_df <- island_df[!(is.na(island_df$geometry)), ]
```

::: callout-note
Using the crs info function to retrieve the referencing system information of these geospatial data.
:::

```{r}
crs_info1 <- st_crs(road_df)
crs_info2 <- st_crs(island_df)
crs_info1
```

```{r}
crs_info2
```

::: callout-note
Changing the referencing system to Singapore national projected coordinate system.
:::

```{r}
road_sf <- st_transform(road_df, crs = 3414)
island_sf <- st_transform(island_df, crs = 3414)
```

```{r}
island_sf <- st_zm(island_sf)
```

```{r}
sf_df <- st_as_sf(road_sf, wkt = "geometry")
roads_in_singapore <- st_intersection(sf_df, island_sf)
```

## 2.2 Mapping the geospatial data sets

::: callout-note
After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.
:::

```{r}
roads_in_singapore <- st_transform(roads_in_singapore, crs = 3414)
```

```{r}
#tmap_mode("plot")
#tm_shape(island_sf) +
#  tm_polygons() +
#  tm_shape(roads_in_singapore) +
#  tm_dots()
```

# 3.0 Geospatial Data wrangling

## 3.1 Converting sf data frames to sp’s Spatial\* class

::: callout-note
The code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial\* class.
:::

```{r}
#| eval: false
island <- as_Spatial(island_sf)
#road <- as_Spatial(road_sf)
road <- as_Spatial(roads_in_singapore)
```

```{r}
#| eval: false
#| echo: false
write_rds(road, "../../data/TakeHome/TakeHome_01/rds/as_road_df.rds")
write_rds(island, "../../data/TakeHome/TakeHome_01/rds/as_island_df.rds")
```

```{r}
road_as <- read_rds("../../data/TakeHome/TakeHome_01/rds/as_road_df.rds")
island_as <- read_rds("../../data/TakeHome/TakeHome_01/rds/as_island_df.rds")
```

```{r}
island_as
```

```{r}
road_as
```

## 3.2 Converting the Spatial\* class into generic sp format

::: callout-note
Since spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial\* classes into ppp object. We need to convert the Spatial classes\* into Spatial object first.

The codes chunk below converts the Spatial\* classes into generic sp objects.
:::

```{r}
island_sp <- as(island_as, "SpatialPolygons")
road_sp <- as(road_as, "SpatialPoints")
```

```{r}
island_sp
```

```{r}
road_sp
```

```{r}
#| eval: false
#| echo: false
write_rds(road_sp, "../../data/TakeHome/TakeHome_01/rds/sp_road_df.rds")
write_rds(island_sp, "../../data/TakeHome/TakeHome_01/rds/sp_island_df.rds")
```

```{r}
road_sp <- read_rds("../../data/TakeHome/TakeHome_01/rds/sp_road_df.rds")
island_sp <- read_rds("../../data/TakeHome/TakeHome_01/rds/sp_island_df.rds")
```

## 3.3 Converting the generic sp format into spatstat’s ppp format

::: callout-note
Now, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.
:::

```{r}
#library(maptools)
road_ppp <- as(road_sp, "ppp")
```

```{r}
plot(road_ppp)
```

```{r}
summary(road_ppp)
```

```{r}
#library(maptools)
sg_owin <- as(island_sp, "owin")
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

## 3.4 Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

::: callout-note
Plot the newly derived islandSG_ppp as shown below.
:::

```{r}
islandSG_ppp = road_ppp[sg_owin]
plot(islandSG_ppp)
```

```{r}
summary(islandSG_ppp)
```

# 4.0 Kernel Density Estimation

## 4.1 Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of density() of spatstat:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_roadSG_bw <- density(road_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_roadSG_bw)
```

```{r}
bw <- bw.diggle(road_ppp)
bw
```

## 4.2 Rescalling KDE values

In the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.

```{r}
road_ppp.km <- rescale(road_ppp, 1000, "km")
```

```{r}
kde_roadSG.bw <- density(road_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_roadSG.bw)
```